diff -Naur PSP-Maps-2.2/io.c PSP-Maps-2.2-new/io.c
--- PSP-Maps-2.2/io.c	2009-12-14 19:28:17.000000000 -0300
+++ PSP-Maps-2.2-new/io.c	2012-05-04 00:29:34.000000000 -0300
@@ -7,11 +7,45 @@
 	if (font == NULL) return;
 	pos.x = x;
 	pos.y = y;
+#ifdef ZIPIT_Z2_UTF8 
+	src = TTF_RenderUTF8_Blended(font, text, color);
+#else
 	src = TTF_RenderText_Blended(font, text, color);
+#endif
 	SDL_BlitSurface(src, NULL, dst, &pos);
 	SDL_FreeSurface(src);
 }
 
+#ifdef ZIPIT_Z2
+/* dead key accent mappings for latin15 */
+int acute_map[] = {
+0xC1,'B','C','D',0xC9,'F','G','H',0xCD,'J','K','L','M','N',0xD3,'P','Q','R','S','T',0xDA,'V','W','X',0xDD,'Z',
+'\'',0,0,0,0,0,
+0xE1,'b','c','d',0xE9,'f','g','h',0xED,'j','k','l','m','n',0xF3,'p','q','r','s','t',0xFA,'v','w','x',0xFD,'z'};
+int grave_map[] = {
+0xC0,'B','C','D',0xC8,'F','G','H',0xCC,'J','K','L','M','N',0xD2,'P','Q','R','S','T',0xD9,'V','W','X','Y','Z',
+'`',0,0,0,0,0,
+0xE0,'b','c','d',0xE8,'f','g','h',0xEC,'j','k','l','m','n',0xF2,'p','q','r','s','t',0xF9,'v','w','x','y','z'};
+int circumflex_map[] = {
+0xC2,'B','C','D',0xCA,'F','G','H',0xCE,'J','K','L','M','N',0xD4,'P','Q','R','S','T',0xDB,'V','W','X','Y','Z',
+'^',0,0,0,0,0,
+0xE2,'b','c','d',0xEA,'f','g','h',0xEE,'j','k','l','m','n',0xF4,'p','q','r','s','t',0xFB,'v','w','x','y','z'};
+int diaeresis_map[] = {
+0xC4,'B','C','D',0xCB,'F','G','H',0xCF,'J','K','L','M','N',0xD6,'P','Q','R','S','T',0xDC,'V','W','X','Y','Z',
+'\"',0,0,0,0,0,
+0xE4,'b','c','d',0xEB,'f','g','h',0xEF,'j','k','l','m','n',0xF6,'p','q','r','s','t',0xFC,'v','w','x',0xFF,'z'};
+int cedilla_map[] = {
+'A','B',0xC7,'D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
+',',0,0,0,0,0,
+'a','b',0xE7,'d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
+int tilde_map[] = {
+0xC3,'B','C','D','E','F','G','H','I','J','K','L','M',0xD1,0xD5,'P','Q','R','S','T','U','V','W','X','Y','Z',
+'~',0,0,0,0,0,
+0xE3,'b','c','d','e','f','g','h','i','j','k','l','m',0xF1,0xF5,'p','q','r','s','t','u','v','w','x','y','z'};
+
+static int dead_key = 0;
+#endif
+
 /* input text */
 void input(SDL_Surface *dst, int x, int y, char *text, int max)
 {
@@ -25,7 +59,11 @@
 		int xx, yy;
 		char tmp;
 		
+#ifdef ZIPIT_Z2_UTF8 
+		TTF_SizeUTF8(font, text, &xx, &yy);
+#else
 		TTF_SizeText(font, text, &xx, &yy);
+#endif
 		pos.x = x;
 		pos.y = y;
 		pos.w = WIDTH - x*2;
@@ -38,7 +76,11 @@
 		{
 			tmp = text[active];
 			text[active] = '\0';
+#ifdef ZIPIT_Z2_UTF8 
+			TTF_SizeUTF8(font, text, &xx, &yy);
+#else
 			TTF_SizeText(font, text, &xx, &yy);
+#endif
 			print(dst, x+xx, y, "_");
 			text[active] = tmp;
 		}
@@ -107,6 +149,9 @@
 	
 	/* arcade */
 	{
+#ifdef ZIPIT_Z2
+		SDL_EnableUNICODE(1);
+#endif
 		strcpy(text, " ");
 		for (;;)
 		{
@@ -125,6 +170,35 @@
 							action = event.jbutton.button;
 						switch (action)
 						{
+#ifdef ZIPIT_Z2
+							case SDLK_ESCAPE:
+							case SDLK_RETURN: 
+								return;
+							case SDLK_LEFT:
+							case SDLK_BACKSPACE:
+#ifdef ZIPIT_Z2_UTF8 
+								/* Gotta backup more than 1 for UTF8 chars. */
+ 								if ((active > 0) && ((text[active] & 0xC0) == 8))
+								{
+									text[active] = '\0';
+									active--;
+								}
+								if ((active > 0) && ((text[active] & 0xC0) == 8))
+								{
+									text[active] = '\0';
+									active--;
+								}
+#endif /* ZIPIT_Z2_UTF8 */
+								if (active > 0)
+								{
+									text[active] = '\0';
+									active--;
+								}
+								else
+									text[active] = ' ';
+								break;
+							case SDLK_RIGHT:
+#else
 							case SDLK_ESCAPE:
 							case SDLK_SPACE:
 							case PSP_BUTTON_START:
@@ -145,6 +219,7 @@
 							case PSP_BUTTON_B:
 							case PSP_BUTTON_Y:
 							case PSP_BUTTON_X:
+#endif
 								if (active < max)
 								{
 									active++;
@@ -161,6 +236,139 @@
 								down = 1;
 								break;
 							default:
+#ifdef ZIPIT_Z2 /* ZIPIT_Z2_LATIN */
+		      if (event.type == SDL_KEYDOWN)
+		      {
+			int key = action;  //event.key.keysym.sym;
+			int fl = event.key.keysym.mod;
+
+			if (((key >= 'a') && (key <= 'z')) || (key == ' '))
+			{
+			  if (fl & KMOD_SHIFT) 
+			    key = toupper(key);
+
+			  //if (!(fl & KMOD_CTRL) && (event.key.keysym.unicode == 0)) // Dead key
+			  if (event.key.keysym.unicode == 0) // Dead key
+			  {
+			    switch (key) {
+			    case 'A':
+			    case 'G':
+			    case 'D':
+			    case 'F':
+			    case 'T':
+			    case 'C':
+			      dead_key = key;
+			    default:
+			      break;
+			    case 'V':
+			      dead_key = 'C'; // (doppleganger for c)
+			      break;
+			    }
+			    //if (dead_key) fprintf(fp, "  dead=%c\n", dead_key);
+			    //else fprintf(fp, "  undead=0\n");
+			    break;	/* skip COMPOSE (dead) keys */
+			  }
+			  else if (dead_key)
+			  {
+			    key = event.key.keysym.unicode;
+			    if((key == 'V') && ((fl & KMOD_ALT) && (fl & KMOD_SHIFT)))
+			    {
+			      //fprintf(fp, "  decomposing %c+<%c>", dead_key, key);
+			      break; // (doppleganger for c)
+			    }
+			    //fprintf(fp, "  composing %c+<%c>", dead_key, key);
+			    if (key == ' ')
+			      key = 'Z'+1;
+			    if (dead_key == 'G') // (event.key.keysym.unicode == 0x300) // grave 
+			      key = grave_map[key - 'A'];
+			    else if (dead_key == 'A') // (event.key.keysym.unicode == 0x301) // acute 
+			      key = acute_map[key - 'A'];
+			    else if (dead_key == 'C') // (event.key.keysym.unicode == 0x302) // circum 
+			      key = circumflex_map[key - 'A'];
+			    else if (dead_key == 'T') // (event.key.keysym.unicode == 0x303) // tilde 
+			      key = tilde_map[key - 'A'];
+			    else if (dead_key == 'D') // (event.key.keysym.unicode == 0x308) // dia 
+			      key = diaeresis_map[key - 'A'];
+			    else if (dead_key == 'F') // (event.key.keysym.unicode == 0x327) // cedilla 
+			      key = cedilla_map[key - 'A'];
+			    dead_key = 0;
+			    //fprintf(fp, " = +<%c>\n", key);
+			  }
+			  else if((key == 'P') && ((fl & KMOD_ALT) && (fl & KMOD_SHIFT)))
+    			    break; // (doppleganger for o)
+			  else if((key == 'Q') && ((fl & KMOD_ALT) && (fl & KMOD_SHIFT)))
+    			    key = 0xBF; // Happier place for upside down question
+			  else if((key == 'W') && ((fl & KMOD_ALT) && (fl & KMOD_SHIFT)))
+    			    break; // (doppleganger for e)
+			  else if((key == 'V') && ((fl & KMOD_ALT) && (fl & KMOD_SHIFT)))
+			  {
+			    dead_key = 'C';  // Happier place for circumflex
+			    //fprintf(fp, "  fakeDEAD=%c\n", dead_key);
+			    break;
+			  }
+			  else
+			  {
+			  dead_key = 0;
+			  if (fl & KMOD_CTRL)
+			  {
+			    /* Skip unicode translation for ctrl keys. */
+			  } 
+			  key = event.key.keysym.unicode;
+			  }
+			event.key.keysym.unicode = key;
+			}
+		      }
+#endif /* ZIPIT_Z2_LATIN */
+
+#ifdef ZIPIT_Z2
+								if ((event.type == SDL_KEYDOWN) && (event.key.keysym.unicode != 0))
+						                {
+#ifdef ZIPIT_Z2_UTF8 
+								  /* 0xff00 would pass 8bit latin1, but ttf font wont.*/
+						                  if ((event.key.keysym.unicode & 0xff80) == 0) // ASCII
+						                  {
+						                    text[active] = event.key.keysym.unicode;
+						                    if (active < max)
+						                      text[++active] = ' ';
+						                    text[active+1] = '\0';
+						                  }
+								  else // UCS-2 Unicode.  Convert to UTF-8
+						                  {
+								    wchar_t wc = event.key.keysym.unicode;
+								    char buf[4] = {0};
+								    int len = 2;
+								    if (wc < 0x800)
+								    {
+								      buf[0] = (0xC0 | wc>>6);
+								      buf[1] = (0x80 | wc & 0x3F);
+								    }
+								    else
+								    {
+								      len=3;
+								      buf[0] = (0xE0 | wc>>12);
+								      buf[1] = (0x80 | wc>>6 & 0x3F);
+								      buf[2] = (0x80 | wc & 0x3F);
+								    }
+								    if (active+len <= max)
+								    text[active] = 0;
+						                    strcat(text, buf);
+								    active += len;
+						                    if (active < max)
+						                      text[++active] = ' ';
+						                    text[active+1] = '\0';
+						                  }
+#else
+								  /* 0xff00 will pass 8bit latin1, but will ttf font?*/
+						                  if ((event.key.keysym.unicode & 0xff00) == 0) //Latin1
+						                  {
+						                    text[active] = event.key.keysym.unicode;
+						                    if (active < max)
+						                      text[++active] = ' ';
+						                    text[active+1] = '\0';
+						                  }
+#endif
+						                }
+#endif
 								break;
 						}
 						break;
diff -Naur PSP-Maps-2.2/Makefile.zipit PSP-Maps-2.2-new/Makefile.zipit
--- PSP-Maps-2.2/Makefile.zipit	1969-12-31 21:00:00.000000000 -0300
+++ PSP-Maps-2.2-new/Makefile.zipit	2012-05-04 00:29:34.000000000 -0300
@@ -0,0 +1,21 @@
+#CFLAGS = -O2 -g
+CFLAGS = -O2 -g -DGP2X -DZIPIT_Z2
+SDLCONFIG = sdl-config
+CURLCONFIG = curl-config
+XMLCONFIG = xml2-config
+LIBS = -lSDL_image -lSDL_gfx -lSDL_ttf -lSDL_mixer -lpng -ljpeg -lcurl -lfreetype -lmpg123
+
+pspmaps: pspmaps.c $(ICON) global.o kml.o tile.c io.c
+	$(CC) $(CFLAGS) -o pspmaps$(EXT) pspmaps.c $(ICON) global.o kml.o $(LIBS) `$(CURLCONFIG) --cflags --libs` `$(SDLCONFIG) --cflags --libs` `$(XMLCONFIG) --libs`
+
+global.o: global.c global.h
+	$(CC) $(CFLAGS) -c global.c
+
+kml.o: kml.c kml.h
+	$(CC) $(CFLAGS) -c kml.c `$(SDLCONFIG) --cflags` `$(XMLCONFIG) --cflags`
+
+icon.o: icon.rc
+	$(WINDRES) -i icon.rc -o icon.o
+
+clean:
+	rm -rf pspmaps pspmaps.exe *.o PSP-Maps.prx PSP-Maps.elf PARAM.SFO EBOOT.PBP pspmaps.gpu cache/ data/*.dat kml/
diff -Naur PSP-Maps-2.2/pspmaps.c PSP-Maps-2.2-new/pspmaps.c
--- PSP-Maps-2.2/pspmaps.c	2009-12-14 19:28:17.000000000 -0300
+++ PSP-Maps-2.2-new/pspmaps.c	2012-05-04 00:29:34.000000000 -0300
@@ -197,6 +197,16 @@
 	PSP_BUTTON_LEFT = 2,
 	PSP_BUTTON_DOWN = 4,
 	PSP_BUTTON_RIGHT = 6,
+#ifdef ZIPIT_Z2
+	PSP_BUTTON_SELECT = 7, 
+	PSP_BUTTON_START = SDLK_BACKSPACE, // = 8
+	PSP_BUTTON_X = SDLK_TAB, // SDLK_TAB = 9
+	PSP_BUTTON_R = 11,
+	PSP_BUTTON_L = 12,
+	PSP_BUTTON_A = SDLK_RETURN, // 13
+	PSP_BUTTON_Y = SDLK_COMMA, // 44
+	PSP_BUTTON_B = SDLK_PERIOD, //46
+#else
 	PSP_BUTTON_START = 8,
 	PSP_BUTTON_SELECT = 9,
 	PSP_BUTTON_L = 10,
@@ -205,6 +215,7 @@
 	PSP_BUTTON_A = 13,
 	PSP_BUTTON_B = 14,
 	PSP_BUTTON_X = 15,
+#endif
 	PSP_NUM_BUTTONS
 };
 #else
@@ -454,7 +465,11 @@
 	lat = atan(exp(M_PI - lat)) / M_PI * 360 - 90;
 	hlineRGBA(screen, 0, WIDTH, 16, 255, 255, 255, 255);
 	boxRGBA(screen, 0, 0, WIDTH, 15, 0, 0, 0, 200);
+#ifdef ZIPIT_Z2
+	sprintf(temp, "Lat %7.3f | Lon %7.3f | %3.1d%% | %s", lat, lon, 100*(16-z)/20, _view[s]);
+#else
 	sprintf(temp, "Lat: %10.6f | Lon: %10.6f | Zoom: %3.1d%% | Type: %s", lat, lon, 100*(16-z)/20, _view[s]);
+#endif
 	print(screen, 5, 0, temp);
 }
 
@@ -535,6 +550,26 @@
 	SDL_Flip(screen);
 }
 
+#ifdef ZIPIT_Z2
+latin2utf8(char *src, char *dst, int max)
+{
+  int i;
+  int j = 0;
+  for (i = 0; i < strlen(src); i++)
+  {
+    /* 0xff00 would pass 8bit latin1, but ttf font wont.*/
+    if ((src[i] & 0x80) == 0) // ASCII
+      dst[j++] = src[i];
+    else // Latin1 char.  Convert to UTF-8
+    {
+      dst[j++] = (0xC0 | (src[i] >>6));
+      dst[j++] = (0x80 | (src[i] & 0x3F));
+    }
+  }
+  dst[j] = '\0';
+}
+#endif
+
 /* lookup address */
 void go()
 {
@@ -555,16 +590,41 @@
 	};
 	
 	box(next, WIDTH/2, HEIGHT/2 - 60, 400, 80, 200);
+#ifdef ZIPIT_Z2
+	print(next, 50, HEIGHT/2 - 90, "Enter address: ");
+#else
 	print(next, 50, HEIGHT/2 - 90, "Enter address, up/down to change letters, start to validate: ");
+#endif
 	input(next, 50, HEIGHT/2 - 60, buffer, 46);
+#ifdef ZIPIT_Z2
+	/* Strip off trailing spaces */
+	while (buffer[strlen(buffer)-1] == ' ')
+	  buffer[strlen(buffer)-1] = 0;
+	/* Convert Latin1 in URL to UTF-8 to conform to RFC 3986 from 2005. */
+	latin2utf8(buffer, request, 100);
+
+	DEBUG("address: %s\n", buffer);
+	address = curl_escape(request, 0);
+#else
 	DEBUG("address: %s\n", buffer);
 	address = curl_escape(buffer, 0);
+#endif
+
+#ifdef ZIPIT_Z2
+	/* need to escape punctuation, but not latin chars (0xC0-0xFF) */
+	//sprintf(address, buffer);
+
+	// quotes does not help
+	//sprintf(request, "\"http://maps.google.com/maps/geo?output=csv&key=%s&q=%s\"", gkey, address);
+
+	// Probably need some other setopt for latin1
+#endif
 	
 	sprintf(request, "http://maps.google.com/maps/geo?output=csv&key=%s&q=%s", gkey, address);
 	free(address);
 	
 	rw = SDL_RWFromMem(response, BUFFER_SIZE);
-	
+
 	//curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);
 	curl_easy_setopt(curl, CURLOPT_USERAGENT, "Mozilla/5.0");
 	curl_easy_setopt(curl, CURLOPT_URL, request);
@@ -575,6 +635,20 @@
 	
 	ret = sscanf(response, "%d,%d,%f,%f", &code, &precision, &lat, &lon);
 	
+#ifdef ZIPIT_Z2_DEBUG
+	{
+	  FILE *fp = fopen("/tmp/pspmaps.url", "w");
+	  if (fp != NULL)
+	  {
+	    fprintf(fp, "<%s>\n", buffer);
+	    fprintf(fp, "%s\n", request);
+	    fprintf(fp, "%s\n", response);
+	    fprintf(fp, "precision: %d, lat: %f, lon: %f\n", precision, lat, lon);
+	    fclose(fp);
+	  }
+	}
+#endif
+	
 	if (ret == 4 && code == 200)
 	{
 		DEBUG("precision: %d, lat: %f, lon: %f\n", precision, lat, lon);
@@ -594,15 +668,35 @@
 	box(next, WIDTH/2, HEIGHT/2 - 60, 400, 80, 200);
 	print(next, 50, HEIGHT/2 - 90, "Enter departure address: ");
 	input(next, 50, HEIGHT/2 - 60, buffer, 46);
+#ifdef ZIPIT_Z2
+	/* Strip off trailing spaces */
+	while (buffer[strlen(buffer)-1] == ' ')
+	  buffer[strlen(buffer)-1] = 0;
+	/* Convert Latin1 in URL to UTF-8 to conform to RFC 3986 from 2005. */
+	latin2utf8(buffer, request, 100);
+
+	DEBUG("address: %s\n", buffer);
+	departure = curl_escape(request, 0);
+#else
 	DEBUG("departure: %s\n", buffer);
 	departure = curl_escape(buffer, 0);
-	
+#endif	
 	box(next, WIDTH/2, HEIGHT/2 - 60, 400, 80, 200);
 	print(next, 50, HEIGHT/2 - 90, "Enter destination address: ");
 	input(next, 50, HEIGHT/2 - 60, buffer, 46);
+#ifdef ZIPIT_Z2
+	/* Strip off trailing spaces */
+	while (buffer[strlen(buffer)-1] == ' ')
+	  buffer[strlen(buffer)-1] = 0;
+	/* Convert Latin1 in URL to UTF-8 to conform to RFC 3986 from 2005. */
+	latin2utf8(buffer, request, 100);
+
+	DEBUG("address: %s\n", buffer);
+	destination = curl_escape(request, 0);
+#else
 	DEBUG("destination: %s\n", buffer);
 	destination = curl_escape(buffer, 0);
-	
+#endif	
 	sprintf(request, "http://maps.google.com/maps?output=kml&saddr=%s&daddr=%s", departure, destination);
 	free(departure);
 	free(destination);
